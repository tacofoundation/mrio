import{_ as s,c as e,a2 as t,o as a}from"./chunks/framework.9hYZJcoh.js";const c=JSON.parse('{"title":"Contributing to mrio","description":"","frontmatter":{},"headers":[],"relativePath":"en/python/CONTRIBUTING.md","filePath":"en/python/CONTRIBUTING.md"}'),n={name:"en/python/CONTRIBUTING.md"};function o(l,i,h,p,r,d){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="contributing-to-mrio" tabindex="-1">Contributing to <code>mrio</code> <a class="header-anchor" href="#contributing-to-mrio" aria-label="Permalink to &quot;Contributing to \`mrio\`&quot;">â€‹</a></h1><p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p><p>You can contribute in many ways:</p><h1 id="types-of-contributions" tabindex="-1">Types of Contributions <a class="header-anchor" href="#types-of-contributions" aria-label="Permalink to &quot;Types of Contributions&quot;">â€‹</a></h1><h2 id="report-bugs" tabindex="-1">Report Bugs <a class="header-anchor" href="#report-bugs" aria-label="Permalink to &quot;Report Bugs&quot;">â€‹</a></h2><p>Report bugs at <a href="https://github.com/tacofoundation/mrio/issues" target="_blank" rel="noreferrer">https://github.com/tacofoundation/mrio/issues</a></p><p>If you are reporting a bug, please include:</p><ul><li>Your operating system name and version.</li><li>Any details about your local setup that might be helpful in troubleshooting.</li><li>Detailed steps to reproduce the bug.</li></ul><h2 id="fix-bugs" tabindex="-1">Fix Bugs <a class="header-anchor" href="#fix-bugs" aria-label="Permalink to &quot;Fix Bugs&quot;">â€‹</a></h2><p>Look through the GitHub issues for bugs. Anything tagged with &quot;bug&quot; and &quot;help wanted&quot; is open to whoever wants to implement a fix for it.</p><h2 id="implement-features" tabindex="-1">Implement Features <a class="header-anchor" href="#implement-features" aria-label="Permalink to &quot;Implement Features&quot;">â€‹</a></h2><p>Look through the GitHub issues for features. Anything tagged with &quot;enhancement&quot; and &quot;help wanted&quot; is open to whoever wants to implement it.</p><h2 id="write-documentation" tabindex="-1">Write Documentation <a class="header-anchor" href="#write-documentation" aria-label="Permalink to &quot;Write Documentation&quot;">â€‹</a></h2><p>Cookiecutter PyPackage could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p><h2 id="submit-feedback" tabindex="-1">Submit Feedback <a class="header-anchor" href="#submit-feedback" aria-label="Permalink to &quot;Submit Feedback&quot;">â€‹</a></h2><p>The best way to send feedback is to file an issue at <a href="https://github.com/tacofoundation/mrio/issues" target="_blank" rel="noreferrer">https://github.com/tacofoundation/mrio/issues</a>.</p><p>If you are proposing a new feature:</p><ul><li>Explain in detail how it would work.</li><li>Keep the scope as narrow as possible, to make it easier to implement.</li><li>Remember that this is a volunteer-driven project, and that contributions are welcome ðŸ˜ƒ</li></ul><h1 id="get-started" tabindex="-1">Get Started! <a class="header-anchor" href="#get-started" aria-label="Permalink to &quot;Get Started!&quot;">â€‹</a></h1><p>Ready to contribute? Here&#39;s how to set up <code>mrio</code> for local development. Please note this documentation assumes you already have <code>poetry</code> and <code>Git</code> installed and ready to go.</p><ol><li><p>Fork the <code>mrio</code> repo on GitHub.</p></li><li><p>Clone your fork locally:</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">directory_in_which_repo_should_be_create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:YOUR_NAME/mrio.git</span></span></code></pre></div><ol start="3"><li>Now we need to install the environment. Navigate into the directory</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mrio</span></span></code></pre></div><p>If you are using <code>pyenv</code>, select a version to use locally. (See installed versions with <code>pyenv versions</code>)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">x.y.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Then, install and activate the environment with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span></span></code></pre></div><ol start="4"><li>Install pre-commit to run linters/formatters at commit time:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pre-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><ol start="5"><li>Create a branch for local development:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name-of-your-bugfix-or-feature</span></span></code></pre></div><p>Now you can make your changes locally.</p><ol start="6"><li><p>Don&#39;t forget to add test cases for your added functionality to the <code>tests</code> directory.</p></li><li><p>When you&#39;re done making changes, check that your changes pass the formatting tests.</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span></span></code></pre></div><p>Now, validate that all unit tests are passing:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><ol start="9"><li>Before raising a pull request you should also run tox. This will run the tests across different versions of Python:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tox</span></span></code></pre></div><p>This requires you to have multiple versions of python installed. This step is also triggered in the CI/CD pipeline, so you could also choose to skip this step locally.</p><ol start="10"><li>Commit your changes and push your branch to GitHub:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your detailed description of your changes.&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name-of-your-bugfix-or-feature</span></span></code></pre></div><ol start="11"><li>Submit a pull request through the GitHub website.</li></ol><h1 id="pull-request-guidelines" tabindex="-1">Pull Request Guidelines <a class="header-anchor" href="#pull-request-guidelines" aria-label="Permalink to &quot;Pull Request Guidelines&quot;">â€‹</a></h1><p>Before you submit a pull request, check that it meets these guidelines:</p><ol><li><p>The pull request should include tests.</p></li><li><p>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in <code>README.md</code>.</p></li></ol>`,46)]))}const k=s(n,[["render",o]]);export{c as __pageData,k as default};
