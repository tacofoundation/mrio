import{_ as s,c as a,a2 as t,o as e}from"./chunks/framework.9hYZJcoh.js";const E=JSON.parse('{"title":"rasterio-like I/O API","description":"","frontmatter":{},"headers":[],"relativePath":"en/python/rasterio_api.md","filePath":"en/python/rasterio_api.md"}'),n={name:"en/python/rasterio_api.md"};function l(h,i,p,r,o,k){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="rasterio-like-i-o-api" tabindex="-1">rasterio-like I/O API <a class="header-anchor" href="#rasterio-like-i-o-api" aria-label="Permalink to &quot;rasterio-like I/O API&quot;">​</a></h1><p>The simplest way to handle multi-dimensional and temporal GeoTIFF files is through the <code>mrio.open</code> function. This function serves as a drop-in replacement for <code>rasterio.open</code>.</p><p>Additionally, <code>mrio</code> provides two convenient wrapper functions:</p><ul><li><p><strong><code>mrio.read</code></strong>: Equivalent to calling <code>mrio.open(mode=&#39;r&#39;)</code>, designed for reading data.</p></li><li><p><strong><code>mrio.write</code></strong>: Equivalent to calling <code>mrio.open(mode=&#39;w&#39;)</code>, designed for writing data.</p></li></ul><h2 id="mrio-open" tabindex="-1"><code>mrio.open</code> <a class="header-anchor" href="#mrio-open" aria-label="Permalink to &quot;\`mrio.open\`&quot;">​</a></h2><p>Opens a multi-dimensional or temporal GeoTIFF file in read or write mode. This function provides a unified interface for opening both standard and multi-resolution GeoTIFF files.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mrio.open(file_path: PathLike, mode: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mode.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, engine: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xarray&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs: Any) </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatasetReader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatasetWriter:</span></span></code></pre></div><p><strong>Parameters:</strong></p><ul><li><code>file_path</code>: Path to the dataset file. It can be a string or Path object.</li><li><code>mode</code>: Operation mode, either &#39;r&#39; for read or &#39;w&#39; for write.</li><li><code>engine</code>: The engine used to read the data. The default is &#39;xarray&#39;. Other options include &#39;numpy&#39;.</li><li><code>**kwargs</code>: Additional keyword arguments passed to the reader or writer.</li></ul><p><strong>Returns:</strong></p><p>Either a <code>DatasetReader</code> for read mode or <code>DatasetWriter</code> for write mode.</p><p><strong>Raises:</strong></p><ul><li>MRIOError: If an invalid mode is provided.</li><li>ValueError: If the file path is invalid or of wrong type.</li><li>RasterioError: If there&#39;s an error opening the file.</li></ul><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mrio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mrio.open(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.tif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tensor:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Display all the metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.profile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Read all the data - (I)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tensor_xr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tensor.read()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Read all the data - (II)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tensor_xr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tensor[:]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Partial read</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tensor_slice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tensor[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mrio.open(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;output.tif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dst:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dst.write(data)</span></span></code></pre></div><h2 id="mrio-read" tabindex="-1"><code>mrio.read</code> <a class="header-anchor" href="#mrio-read" aria-label="Permalink to &quot;\`mrio.read\`&quot;">​</a></h2><p>Convenience function to read a dataset file. This is equivalent to calling open() with read mode.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mrio.read(file_path: PathLike, engine: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xarray&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs: Any) </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatasetReader:</span></span></code></pre></div><p><strong>Parameters:</strong></p><ul><li><code>file_path</code>: Path to the dataset file. It can be a string or Path object.</li><li><code>engine</code>: The engine used to read the data. The default is &#39;xarray&#39;. Other options include &#39;numpy&#39;.</li><li><code>**kwargs</code>: Additional keyword arguments passed to the reader.</li></ul><p><strong>Returns:</strong> A <code>DatasetReader</code> object.</p><p><strong>Raises:</strong></p><ul><li>ValueError: If the file path is invalid or of wrong type.</li><li>RasterioError: If there&#39;s an error opening the file.</li></ul><h2 id="mrio-write" tabindex="-1"><code>mrio.write</code> <a class="header-anchor" href="#mrio-write" aria-label="Permalink to &quot;\`mrio.write\`&quot;">​</a></h2><p>Convenience function to write a dataset file. This is equivalent to calling open() with write mode.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mrio.write(file_path: PathLike, data: DataArray, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs: Any) </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DatasetWriter:</span></span></code></pre></div><p><strong>Parameters:</strong></p><ul><li><code>file_path</code>: Path to the dataset file. It can be a string or Path object.</li><li><code>data</code>: Data to write to the file.</li><li><code>**kwargs</code>: Additional keyword arguments passed to the writer.</li></ul><p><strong>Returns:</strong></p><p>A DatasetWriter object.</p><p><strong>Raises:</strong></p><ul><li>ValueError: If the file path is invalid or of wrong type.</li><li>RasterioError: If there&#39;s an error opening the file.</li></ul><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mrio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mrio.open(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;output.tif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dst:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dst.write(data)</span></span></code></pre></div>`,34)]))}const g=s(n,[["render",l]]);export{E as __pageData,g as default};
